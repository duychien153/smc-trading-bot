import os
from dotenv import load_dotenv
from pybit.unified_trading import HTTP

load_dotenv()

API_KEY = os.getenv("API_KEY")
API_SECRET = os.getenv("API_SECRET")
AUTO_TRADE = os.getenv("AUTO_TRADE", "false").lower() == "true"

session = HTTP(testnet=True, api_key=API_KEY, api_secret=API_SECRET)

print("=== üß™ Test Auto Trading ===")
print(f"AUTO_TRADE setting: {AUTO_TRADE}")

# Test 1: Ki·ªÉm tra balance
try:
    balance_data = session.get_wallet_balance(accountType="UNIFIED")
    account_info = balance_data['result']['list'][0]
    total_balance = float(account_info.get('totalWalletBalance', 0))
    available_balance = float(account_info.get('totalAvailableBalance', 0))
    print(f"üí∞ Balance: ${total_balance} (Available: ${available_balance})")
except Exception as e:
    print(f"‚ùå L·ªói l·∫•y balance: {e}")

# Test 2: Ki·ªÉm tra positions hi·ªán t·∫°i
try:
    positions = session.get_positions(category="linear", symbol="BTCUSDT")
    if positions['retCode'] == 0:
        open_positions = [p for p in positions['result']['list'] if float(p['size']) > 0]
        print(f"üìä Open positions: {len(open_positions)}")
        
        for pos in open_positions:
            print(f"   {pos['side']} {pos['size']} @ ${pos['avgPrice']}")
    else:
        print(f"‚ùå L·ªói l·∫•y positions: {positions['retMsg']}")
except Exception as e:
    print(f"‚ùå L·ªói check positions: {e}")

# Test 3: Simulate ƒë·∫∑t l·ªánh (n·∫øu AUTO_TRADE = True)
if AUTO_TRADE:
    print("\nüö® AUTO_TRADE = True")
    print("‚ö†Ô∏è  Bot s·∫Ω ƒë·∫∑t l·ªánh th·∫≠t khi c√≥ signal!")
    print("üìù ƒê·ªÉ test an to√†n, set AUTO_TRADE=false trong .env")
else:
    print("\n‚úÖ AUTO_TRADE = False") 
    print("üîí Bot ch·ªâ hi·ªÉn th·ªã signal, kh√¥ng ƒë·∫∑t l·ªánh th·∫≠t")
    print("üí° ƒê·ªÉ b·∫≠t auto trading, set AUTO_TRADE=true trong .env")

print("\nüîç ƒê·ªÉ xem bot ho·∫°t ƒë·ªông:")
print("1. python smc_bot.py - test 1 l·∫ßn")
print("2. Ch·ªçn 'y' ƒë·ªÉ ch·∫°y live monitoring")
print("3. Bot s·∫Ω b√°o khi c√≥ signal SMC")

if AUTO_TRADE and available_balance > 0:
    print("\n‚ö° Bot s·∫µn s√†ng auto trading!")
elif AUTO_TRADE and available_balance == 0:
    print("\n‚ö†Ô∏è  AUTO_TRADE b·∫≠t nh∆∞ng balance = 0")
else:
    print("\nüîí Safe mode: Ch·ªâ hi·ªÉn th·ªã signals")